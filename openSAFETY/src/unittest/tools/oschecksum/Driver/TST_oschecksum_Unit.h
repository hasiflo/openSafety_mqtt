/**
 * \file TST_oschecksum_Unit.h
 * Specifies the unittests for the functions \ref crc8ChecksumCalculator and \ref crc8Checksum
 * \addtogroup unittest
 * \{
 * \addtogroup tools
 * \{
 * \addtogroup oschecksum
 * \{
 * \addtogroup liboschecksum_unittest
 * \{
 * \details
 * \{
 * Copyright (c) 2011,  Bernecker + Rainer Industrie-Elektronik Ges.m.b.H
 * All rights reserved, Bernecker + Rainer Industrie-Elektronik Ges.m.b.H
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the BSD license (according to License.txt).
 * \}
 * \author Patrik Harner, Bernecker + Rainer Industrie-Elektronik Ges.m.b.H
 * \version 1.0
 */

#include <stdint.h>
#include <assert.h>

#include <cunit/CUnit.h>

#include <oschecksum/crc.h>

#ifndef U_TST_oschecksum_H_
#define U_TST_oschecksum_H_

#ifdef __cplusplus
extern "C"
{
#endif

/* This symbol represents the maximum length of the test name */
#define k_MAX_TESTSUITE_NAME_LEN 100

/* Testsuite structure is used to start one testsuite */
typedef struct
{
        char ab_name[k_MAX_TESTSUITE_NAME_LEN]; /* testsuite name */
        CU_InitializeFunc pf_initFunc; /* pointer to the testsuite init function */
        CU_TestFunc pf_testFunc; /* pointer to the testsuite function */
        uint8_t b_noTests; /* number of test cases */
} t_TEST_SUITE;


/**
 * \brief test the default value in crc16ChecksumPoly
 *
 * \param none
 *
 * \return none
 */
void TST_CRC16_checksum_poly(void);

/**
 * \brief test the consistency from the CRC8 precompiled value and the calculated value
 *
 * \param none
 *
 * \return none
 */
void TST_CRC8_cksum_calc_prec(void);

/**
 * \brief test the consistency from the CRC16 precompiled value and the calculated value
 *
 * \param none
 *
 * \return none
 */
void TST_CRC16_cksum_calc_prec(void);

/**
 * \brief test the consistency from the CRC16_AC9A precompiled value and the calculated value
 *
 * \param none
 *
 * \return none
 */
void TST_CRC16_AC9A_cksum_calc_prec(void);

/**
 * \brief test the consistency from the CRC32 precompiled value and the calculated value
 *
 * \param none
 *
 * \return none
 */
void TST_CRC32_cksum_calc_prec(void);

/**
 * \brief test the consistency from the CRC32_PNG precompiled value and the calculated value
 *
 * \param none
 *
 * \return none
 */
void TST_CRC32_PNG_cksum_calc_prec(void);

/**
 * \brief test the consistency from the CRC8 precompiled value
 *  and the calculated value from the crc protocol
 */
void TST_CRC8_cksum_protocol_prec(void);

/**
 * \brief test the consistency from the CRC8 precompiled value
 *  and the calculated value from the crc protocol
 */
void TST_CRC8_cksum_protocol_calc(void);

/**
 * \brief test the consistency from the CRC16 precompiled value
 *  and the calculated value from the crc protocol
 */
void TST_CRC16_cksum_protocol_prec(void);

/**
 * \brief test the consistency from the CRC16 precompiled value
 *  and the calculated value from the crc protocol
 */
void TST_CRC16_cksum_protocol_calc(void);



/**
 * \brief test the consistency from the CRC8 calculated value
 * and the openSAFETY specification crc protocol value
 *
 * \details this function generates subframe1 and subframe2 with a length
 * from 0 to 8 elements (payload) calculates then
 * a CRC checksum with the example from the openSAFETY specification and makes a cross-check
 * with the standard CRC calculator
 *
 * \param none
 *
 * \return none
 */
void TST_CRC8_rnd_subframe(void);

/**
 * \brief test the consistency from the CRC16 calculated value
 * and the openSAFETY specification crc protocol value
 *
 * \details this function generates subframe1 and subframe2 with a length
 * from 9 to 255 elements (payload) calculates then
 * a CRC checksum with the example from the openSAFETY specification and makes a cross-check
 * with the standard CRC calculator
 *
 * \param none
 *
 * \return none
 */
void TST_CRC16_rnd_subframe(void);

/**
 * \brief test if the sanity check for crc32 works
 *
 * \details sanity check has to return 0 for a working crc calculation
 *
 * \param none
 *
 * \return none
 */
void TST_crc32SanityCheck(void);


/**
 * \brief Calculates an example parameter crc as generated by the SafeLogic SCM
 *
 * \param none
 *
 * \return none
 */
void TST_paramcrcCheck(void);

#ifdef __cplusplus
}
#endif
#endif /*TST_oschecksum_H_*/
/**
* \}
* \}
* \}
* \}
*/
